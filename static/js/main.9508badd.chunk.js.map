{"version":3,"sources":["components/Button/styles.module.css","Planner/Calendar/Month/Day/styles.module.css","Planner/Events/EventsList/ToggleableEventItem/styles.module.css","js/store.js","js/actions.js","js/contexts/ThemeContext.js","js/contexts/CalendarContext.js","js/contexts/EventsContext.js","components/SectionHeader/index.js","components/Button/index.js","Planner/PlannerHeader.js","Planner/Calendar/CalendarHeader.js","js/helpers.js","components/Cell/index.js","Planner/Calendar/Month/Day/index.js","Planner/Calendar/Month/index.js","Planner/Calendar/index.js","components/Toggleable/index.js","components/Alert/index.js","components/Form/index.js","Planner/Events/EventsHeader.js","Planner/Events/EventsList/ToggleableEventItem/EventItem.js","Planner/Events/EventsList/ToggleableEventItem/index.js","Planner/Events/EventsList/index.js","Planner/Events/index.js","Planner/index.js","App/index.js","index.js","Planner/Calendar/styles.module.css","Planner/Events/styles.module.css","components/Form/styles.module.css","components/SectionHeader/styles.module.css","components/Alert/styles.module.css","components/Cell/styles.module.css","Planner/Calendar/Month/styles.module.css","Planner/Events/EventsList/styles.module.css","Planner/styles.module.css","App/styles.module.css"],"names":["module","exports","makeStore","reducer","initialState","storageKey","StoreContext","createContext","DispatchContext","children","useReducer","store","dispatch","useEffect","localStorage","setItem","JSON","stringify","Provider","value","useContext","setMonth","month","type","state","action","darkMode","parse","getItem","ThemeProvider","useThemeStore","useThemeDispatch","initalDate","Date","initalState","selectedDate","currentMonth","date","CalendarProvider","useCalendarStore","useCalendarDispatch","localState","dateId","data","newState","event","id","now","addEvent","eventId","newEvents","filter","length","deleteEvent","map","updateEvent","EventsProvider","useEventsStore","useEventsDispatch","SectionHeader","heading","className","cx","s","sectionHeader","sectionTitle","ButtonGroup","buttonGroup","InputButton","buttonType","onClick","button","Button","PlannerHeader","Helmet","data-theme","CalendarHeader","format","calendarHeader","addMonths","useToggle","defaultValue","useState","setState","Cell","style","cell","Day","day","isDateWithEvents","span","isToday","isSelectedDate","isSameDay","MonthHeader","key","Month","daysInMonth","getDaysInMonth","startDate","startOfMonth","startDay","getDay","dates","i","push","addDays","getDayFormat","events","datesWithEvents","Object","keys","fillerCell","gridArea","days","toDateString","includes","Calendar","calendar","Toggleable","showSecondaryComponent","initialComponent","secondaryComponent","propTypes","PropTypes","bool","node","Alert","alert","Form","title","description","onSubmit","onCancel","error","values","setValues","handleFormChange","e","target","name","handleSubmit","preventDefault","form","autoComplete","placeholder","onChange","EventsHeader","showForm","toggle","selectedDateId","formData","addEventBtn","eventsHeader","EventItem","toggleEditMode","eventItem","eventItemBody","eventTitle","eventDescription","ToggleableEventItem","editMode","editEventForm","EventsList","currentDateEvents","eventsToShow","eventItems","noItemsAlert","eventsList","Events","Planner","planner","App","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9508badd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"styles_button__15vv_\",\"primary\":\"styles_primary__uOOrG\",\"buttonGroup\":\"styles_buttonGroup__WW3q2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"day\":\"styles_day__7ymiO\",\"span\":\"styles_span__3Jzh2\",\"isSelectedDate\":\"styles_isSelectedDate__1FNCU\",\"isToday\":\"styles_isToday__2DbWS\",\"isDateWithEvents\":\"styles_isDateWithEvents__1UZeA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"eventItem\":\"styles_eventItem__1wDgA\",\"eventItemBody\":\"styles_eventItemBody__1MNSb\",\"eventTitle\":\"styles_eventTitle__1DR1a\",\"eventDescription\":\"styles_eventDescription__30SlU\"};","import React, { createContext, useContext, useReducer, useEffect } from \"react\";\n\nconst makeStore = (reducer, initialState, storageKey) => {\n    const StoreContext = createContext();\n    const DispatchContext = createContext();\n\n    const StoreProvider = ({ children }) => {\n        const [store, dispatch] = useReducer(reducer, initialState);\n\n        useEffect(() => {\n            if (storageKey) {\n                localStorage.setItem(storageKey, JSON.stringify(store));\n            }\n        }, [store]);\n\n        return (\n            <DispatchContext.Provider value={dispatch}>\n                <StoreContext.Provider value={store}>\n                    {children}\n                </StoreContext.Provider>\n            </DispatchContext.Provider>\n        );\n    };\n\n    const useStore = () => useContext(StoreContext);\n    const useDispatch = () => useContext(DispatchContext);\n\n    return [StoreProvider, useStore, useDispatch];\n};\n\nexport default makeStore;\n","// Action types\nexport const TOGGLE_THEME = \"TOGGLE_THEME\";\nexport const SET_SELECTED_DATE = \"SET_SELECTED_DATE\";\nexport const SET_MONTH = \"SET_MONTH\";\nexport const SET_TODAY = \"SET_TODAY\";\nexport const ADD_EVENT = \"ADD_EVENT\";\nexport const DELETE_EVENT = \"DELETE_EVENT\";\nexport const UPDATE_EVENT = \"UPDATE_EVENT\";\n\n// Action creators\nexport const toggleTheme = () => ({ type: TOGGLE_THEME });\nexport const setSelectedDate = (date) => ({ type: SET_SELECTED_DATE, date });\nexport const setMonth = (month) => ({ type: SET_MONTH, month });\nexport const setToday = () => ({ type: SET_TODAY });\nexport const addEvent = (dateId, data) => ({ type: ADD_EVENT, dateId, data });\nexport const deleteEvent = (dateId, eventId) => ({\n    type: DELETE_EVENT,\n    dateId,\n    eventId,\n});\nexport const updateEvent = (dateId, eventId, data) => ({\n    type: UPDATE_EVENT,\n    dateId,\n    eventId,\n    data,\n});\n","import makeStore from \"../store\";\nimport { TOGGLE_THEME } from \"../actions\";\n\nconst storageKey = \"darkMode\";\nconst localState = JSON.parse(localStorage.getItem(storageKey));\n\nconst initalState = {\n    darkMode: false,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case TOGGLE_THEME:\n            return { darkMode: !state.darkMode };\n        default:\n            return state;\n    }\n};\n\nconst [ThemeProvider, useThemeStore, useThemeDispatch] = makeStore(\n    reducer,\n    localState || initalState,\n    storageKey\n);\n\nexport { ThemeProvider, useThemeStore, useThemeDispatch };\n","import makeStore from \"../store\";\nimport { SET_SELECTED_DATE, SET_MONTH, SET_TODAY } from \"../actions\";\n\nconst initalDate = new Date();\n\nconst initalState = {\n    selectedDate: initalDate,\n    currentMonth: initalDate,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case SET_SELECTED_DATE:\n            return { ...state, selectedDate: action.date };\n        case SET_MONTH:\n            return { ...state, currentMonth: action.month };\n        case SET_TODAY:\n            return { ...initalState };\n        default:\n            return state;\n    }\n};\n\nconst [CalendarProvider, useCalendarStore, useCalendarDispatch] = makeStore(\n    reducer,\n    initalState\n);\n\nexport { CalendarProvider, useCalendarStore, useCalendarDispatch };\n","import makeStore from \"../store\";\nimport { ADD_EVENT, UPDATE_EVENT, DELETE_EVENT } from \"../actions\";\n\nconst storageKey = \"events\";\nconst localState = JSON.parse(localStorage.getItem(storageKey));\nconst initalState = {};\n\nconst addEvent = (state, action) => {\n    const { dateId, data } = action;\n    const newState = { ...state };\n    const event = { ...data, id: Date.now() };\n\n    if (!state[dateId]) {\n        newState[dateId] = [event];\n    } else {\n        newState[dateId] = [...newState[dateId], event];\n    }\n\n    return newState;\n};\n\nconst updateEvent = (state, action) => {\n    const { dateId, eventId, data } = action;\n    const newEvents = { ...state };\n\n    newEvents[dateId] = newEvents[dateId].map((event) =>\n        event.id === eventId ? { ...event, ...data } : event\n    );\n\n    return newEvents;\n};\n\nconst deleteEvent = (state, action) => {\n    const { dateId, eventId } = action;\n    const newEvents = { ...state };\n\n    newEvents[dateId] = newEvents[dateId].filter(\n        (event) => event.id !== eventId\n    );\n\n    if (newEvents[dateId].length === 0) delete newEvents[dateId];\n\n    return newEvents;\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case ADD_EVENT:\n            return addEvent(state, action);\n        case DELETE_EVENT:\n            return deleteEvent(state, action);\n        case UPDATE_EVENT:\n            return updateEvent(state, action);\n        default:\n            return state;\n    }\n};\n\nconst [EventsProvider, useEventsStore, useEventsDispatch] = makeStore(\n    reducer,\n    localState || initalState,\n    storageKey\n);\n\nexport { EventsProvider, useEventsStore, useEventsDispatch };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport s from \"./styles.module.css\";\n\nconst SectionHeader = ({ heading, className, children }) => (\n    <header className={cx(s.sectionHeader, className)}>\n        {heading && <h2 className={s.sectionTitle}>{heading}</h2>}\n        {children}\n    </header>\n);\n\nSectionHeader.propTypes = {\n    heading: PropTypes.string,\n    className: PropTypes.string,\n    children: PropTypes.node,\n};\n\nexport default SectionHeader;\n","import React from \"react\";\nimport cx from \"classnames\";\nimport s from \"./styles.module.css\";\n\nexport const ButtonGroup = ({ children }) => (\n    <div className={s.buttonGroup}>{children}</div>\n);\n\nexport const InputButton = ({ type, buttonType, children, onClick }) => (\n    <input\n        className={cx(s.button, s[buttonType])}\n        type={type}\n        value={children}\n        onClick={onClick}\n    />\n);\n\nconst Button = ({ type, children, onClick }) => (\n    <button className={cx(s.button, s[type])} onClick={onClick}>\n        {children}\n    </button>\n);\n\nexport default Button;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useThemeStore, useThemeDispatch } from \"js/contexts/ThemeContext\";\nimport { toggleTheme } from \"js/actions\";\nimport SectionHeader from \"components/SectionHeader\";\nimport Button from \"components/Button\";\n\nconst PlannerHeader = () => {\n    const { darkMode } = useThemeStore();\n    const dispatch = useThemeDispatch();\n\n    return (\n        <SectionHeader>\n            <Helmet>\n                <html data-theme={darkMode && \"dark\"} />\n            </Helmet>\n            <Button onClick={() => dispatch(toggleTheme())}>\n                Mode: {darkMode ? \"Dark\" : \"Light\"}\n            </Button>\n        </SectionHeader>\n    );\n};\n\nexport default PlannerHeader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { format, addMonths } from \"date-fns\";\nimport { useCalendarDispatch } from \"js/contexts/CalendarContext\";\nimport { setMonth, setToday } from \"js/actions\";\nimport SectionHeader from \"components/SectionHeader\";\nimport Button, { ButtonGroup } from \"components/Button\";\nimport s from \"./styles.module.css\";\n\nconst CalendarHeader = ({ currentMonth }) => {\n    const dispatch = useCalendarDispatch();\n\n    return (\n        <SectionHeader\n            heading={format(currentMonth, \"MMMM YYYY\")}\n            className={s.calendarHeader}\n        >\n            <ButtonGroup>\n                <Button\n                    onClick={() =>\n                        dispatch(setMonth(addMonths(currentMonth, -1)))\n                    }\n                    type=\"primary\"\n                >\n                    &#8592;\n                </Button>\n                <Button onClick={() => dispatch(setToday())}>Today</Button>\n                <Button\n                    onClick={() =>\n                        dispatch(setMonth(addMonths(currentMonth, 1)))\n                    }\n                    type=\"primary\"\n                >\n                    &#8594;\n                </Button>\n            </ButtonGroup>\n        </SectionHeader>\n    );\n};\n\nCalendarHeader.propTypes = {\n    currentMonth: PropTypes.object.isRequired,\n};\n\nexport default CalendarHeader;\n","import { useState } from \"react\";\nimport { getDaysInMonth, startOfMonth, addDays, getDay } from \"date-fns\";\n\nexport const useToggle = (defaultValue) => {\n    const [state, setState] = useState(defaultValue);\n    const toggleState = () => setState(!state);\n\n    return [state, toggleState];\n};\n\nexport const getDayFormat = (currentMonth) => {\n    const daysInMonth = getDaysInMonth(currentMonth);\n    const startDate = startOfMonth(currentMonth);\n    const startDay = getDay(startDate);\n    const dates = [];\n\n    for (let i = 0; i < daysInMonth; i++) {\n        dates.push(addDays(startDate, i));\n    }\n\n    return [startDay, dates];\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport s from \"./styles.module.css\";\n\nconst Cell = ({ style, className, children, onClick }) => (\n    <div\n        style={{ ...style }}\n        className={cx(s.cell, className)}\n        onClick={onClick}\n    >\n        {children}\n    </div>\n);\n\nCell.propTypes = {\n    styles: PropTypes.object,\n    className: PropTypes.string,\n    children: PropTypes.node,\n    onClick: PropTypes.func,\n};\n\nexport default Cell;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport { format, isToday, isSameDay } from \"date-fns\";\nimport {\n    useCalendarStore,\n    useCalendarDispatch,\n} from \"js/contexts/CalendarContext\";\nimport { setSelectedDate } from \"js/actions\";\nimport Cell from \"components/Cell\";\nimport s from \"./styles.module.css\";\n\nconst Day = ({ day, isDateWithEvents }) => {\n    const { selectedDate } = useCalendarStore();\n    const dispatch = useCalendarDispatch();\n\n    return (\n        <Cell\n            className={cx(s.day, {\n                [s.isDateWithEvents]: isDateWithEvents,\n            })}\n            onClick={() => dispatch(setSelectedDate(day))}\n        >\n            <span\n                className={cx(s.span, {\n                    [s.isToday]: isToday(day),\n                    [s.isSelectedDate]: isSameDay(day, selectedDate),\n                })}\n            >\n                {format(day, \"D\")}\n            </span>\n        </Cell>\n    );\n};\n\nDay.propTypes = {\n    day: PropTypes.object.isRequired,\n    isDateWithEvents: PropTypes.bool.isRequired,\n};\n\nexport default Day;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useEventsStore } from \"js/contexts/EventsContext\";\nimport { getDayFormat } from \"js/helpers\";\nimport Cell from \"components/Cell\";\nimport Day from \"./Day\";\nimport s from \"./styles.module.css\";\n\nconst MonthHeader = () =>\n    [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map((day) => (\n        <Cell key={day}>{day}</Cell>\n    ));\n\nconst Month = ({ currentMonth }) => {\n    const [startDay, dates] = getDayFormat(currentMonth);\n    const events = useEventsStore();\n    const datesWithEvents = Object.keys(events);\n\n    // Used to properly set the starting day of the month\n    const fillerCell = startDay > 0 && (\n        <Cell style={{ gridArea: `2 / 1 / 3 / ${startDay + 1}` }} />\n    );\n    const days = dates.map((day) => {\n        const dateId = day.toDateString();\n        const isDateWithEvents = datesWithEvents.includes(dateId);\n\n        return <Day key={day} day={day} isDateWithEvents={isDateWithEvents} />;\n    });\n\n    return (\n        <div className={s.month}>\n            <MonthHeader />\n            {fillerCell}\n            {days}\n        </div>\n    );\n};\n\nMonth.propTypes = {\n    currentMonth: PropTypes.object.isRequired,\n};\n\nexport default Month;\n","import React from \"react\";\nimport { useCalendarStore } from \"js/contexts/CalendarContext\";\nimport CalendarHeader from \"./CalendarHeader\";\nimport Month from \"./Month\";\nimport s from \"./styles.module.css\";\n\nconst Calendar = () => {\n    const { currentMonth } = useCalendarStore();\n\n    return (\n        <div className={s.calendar}>\n            <CalendarHeader currentMonth={currentMonth} />\n            <Month currentMonth={currentMonth} />\n        </div>\n    );\n};\n\nexport default Calendar;\n","import PropTypes from \"prop-types\";\n\nconst Toggleable = ({\n    showSecondaryComponent,\n    initialComponent,\n    secondaryComponent,\n}) => (showSecondaryComponent ? secondaryComponent : initialComponent);\n\nToggleable.propTypes = {\n    showSecondaryComponent: PropTypes.bool,\n    initialComponent: PropTypes.node,\n    secondaryComponent: PropTypes.node,\n};\n\nexport default Toggleable;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\nimport s from \"./styles.module.css\";\n\nconst Alert = ({ type, children }) => (\n    <div className={cx(s.alert, s[type])}>{children}</div>\n);\n\nAlert.propTypes = {\n    type: PropTypes.string,\n    children: PropTypes.node,\n};\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Alert from \"../Alert\";\nimport { InputButton, ButtonGroup } from \"../Button\";\nimport s from \"./styles.module.css\";\n\nconst Form = ({ title, description, onSubmit, onCancel }) => {\n    const [values, setValues] = useState({\n        title: title || \"\",\n        description: description || \"\",\n        error: \"\",\n    });\n    const handleFormChange = (e) => {\n        const { name, value } = e.target;\n\n        setValues({ ...values, [name]: value });\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const { title, description } = values;\n\n        if (title === \"\") {\n            setValues({ ...values, error: \"Event needs a title.\" });\n        } else {\n            onSubmit({ title, description });\n        }\n    };\n\n    return (\n        <>\n            {values.error && <Alert type=\"error\">{values.error}</Alert>}\n            <form className={s.form} onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    name=\"title\"\n                    autoComplete=\"off\"\n                    placeholder=\"What are you up to?\"\n                    value={values.title}\n                    className={s.title}\n                    onChange={handleFormChange}\n                />\n                <textarea\n                    name=\"description\"\n                    placeholder=\"More details...\"\n                    value={values.description}\n                    className={s.description}\n                    onChange={handleFormChange}\n                />\n\n                <ButtonGroup>\n                    <InputButton\n                        onClick={handleSubmit}\n                        type=\"submit\"\n                        buttonType=\"primary\"\n                    >\n                        {title ? \"Update\" : \"Submit\"}\n                    </InputButton>\n                    <InputButton onClick={onCancel} type=\"button\">\n                        Cancel\n                    </InputButton>\n                </ButtonGroup>\n            </form>\n        </>\n    );\n};\n\nForm.propTypes = {\n    title: PropTypes.string,\n    description: PropTypes.string,\n    onSubmit: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { format } from \"date-fns\";\nimport { useEventsDispatch } from \"js/contexts/EventsContext\";\nimport { addEvent } from \"js/actions\";\nimport { useToggle } from \"js/helpers\";\nimport SectionHeader from \"components/SectionHeader\";\nimport Toggleable from \"components/Toggleable\";\nimport Form from \"components/Form\";\nimport Button from \"components/Button\";\nimport s from \"./styles.module.css\";\n\nconst EventsHeader = ({ selectedDate }) => {\n    const dispatch = useEventsDispatch();\n    const [showForm, toggle] = useToggle(false);\n    const selectedDateId = selectedDate.toDateString();\n\n    const handleSubmit = (formData) => {\n        dispatch(addEvent(selectedDateId, formData));\n        toggle();\n    };\n\n    const form = <Form onCancel={toggle} onSubmit={handleSubmit} />;\n    const addEventBtn = (\n        <Button onClick={toggle} type=\"primary\">\n            + Add Event\n        </Button>\n    );\n\n    return (\n        <SectionHeader\n            heading={`Events for ${format(selectedDate, \"ddd MMM Do, YYYY\")}`}\n            className={s.eventsHeader}\n        >\n            <Toggleable\n                showSecondaryComponent={showForm}\n                initialComponent={addEventBtn}\n                secondaryComponent={form}\n            />\n        </SectionHeader>\n    );\n};\n\nEventsHeader.propTypes = {\n    selectedDate: PropTypes.object,\n};\n\nexport default EventsHeader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button, { ButtonGroup } from \"components/Button\";\nimport s from \"./styles.module.css\";\n\nconst EventItem = ({ title, description, deleteEvent, toggleEditMode }) => (\n    <div className={s.eventItem}>\n        <div className={s.eventItemBody}>\n            <h3 className={s.eventTitle}>{title}</h3>\n            {description && <p className={s.eventDescription}>{description}</p>}\n        </div>\n\n        <ButtonGroup>\n            <Button onClick={toggleEditMode} type=\"primary\">\n                Edit\n            </Button>\n            <Button onClick={deleteEvent}>Delete</Button>\n        </ButtonGroup>\n    </div>\n);\n\nEventItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    deleteEvent: PropTypes.func.isRequired,\n    toggleEditMode: PropTypes.func.isRequired,\n};\n\nexport default EventItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useEventsDispatch } from \"js/contexts/EventsContext\";\nimport { updateEvent, deleteEvent } from \"js/actions\";\nimport { useToggle } from \"js/helpers\";\nimport Toggleable from \"components/Toggleable\";\nimport Form from \"components/Form\";\nimport EventItem from \"./EventItem\";\n\nconst ToggleableEventItem = ({ title, description, id, selectedDateId }) => {\n    const dispatch = useEventsDispatch();\n    const [editMode, toggleEditMode] = useToggle(false);\n\n    const handleSubmit = (formData) => {\n        dispatch(updateEvent(selectedDateId, id, formData));\n        toggleEditMode();\n    };\n\n    const eventItem = (\n        <EventItem\n            title={title}\n            description={description}\n            deleteEvent={() => dispatch(deleteEvent(selectedDateId, id))}\n            toggleEditMode={toggleEditMode}\n        />\n    );\n    const editEventForm = (\n        <Form\n            onCancel={toggleEditMode}\n            onSubmit={handleSubmit}\n            title={title}\n            description={description}\n        />\n    );\n\n    return (\n        <Toggleable\n            showSecondaryComponent={editMode}\n            initialComponent={eventItem}\n            secondaryComponent={editEventForm}\n        />\n    );\n};\n\nToggleableEventItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    selectedDateId: PropTypes.string,\n};\n\nexport default ToggleableEventItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useEventsStore } from \"js/contexts/EventsContext\";\nimport Alert from \"components/Alert\";\nimport Toggleable from \"components/Toggleable\";\nimport ToggleableEventItem from \"./ToggleableEventItem\";\nimport s from \"./styles.module.css\";\n\nconst EventsList = ({ selectedDateId }) => {\n    const events = useEventsStore();\n    const currentDateEvents = events[selectedDateId] || [];\n    const eventsToShow = currentDateEvents.length !== 0;\n\n    const eventItems = currentDateEvents.map((event) => (\n        <ToggleableEventItem\n            key={event.id}\n            {...event}\n            selectedDateId={selectedDateId}\n        />\n    ));\n\n    const noItemsAlert = <Alert type=\"info\">No events for today.</Alert>;\n\n    return (\n        <div className={s.eventsList}>\n            <Toggleable\n                showSecondaryComponent={eventsToShow}\n                initialComponent={noItemsAlert}\n                secondaryComponent={eventItems}\n            />\n        </div>\n    );\n};\n\nEventsList.propTypes = {\n    selectedDateId: PropTypes.string.isRequired,\n};\n\nexport default EventsList;\n","import React from \"react\";\nimport { useCalendarStore } from \"js/contexts/CalendarContext\";\nimport EventsHeader from \"./EventsHeader\";\nimport EventsList from \"./EventsList\";\nimport s from \"./styles.module.css\";\n\nconst Events = () => {\n    const { selectedDate } = useCalendarStore();\n    const selectedDateId = selectedDate.toDateString();\n\n    return (\n        <div className={s.events}>\n            <EventsHeader selectedDate={selectedDate} />\n            <EventsList selectedDateId={selectedDateId} />\n        </div>\n    );\n};\n\nexport default Events;\n","import React from \"react\";\nimport PlannerHeader from \"./PlannerHeader\";\nimport Calendar from \"./Calendar\";\nimport Events from \"./Events\";\nimport s from \"./styles.module.css\";\n\nconst Planner = () => (\n    <>\n        <PlannerHeader />\n        <div className={s.planner}>\n            <Calendar />\n            <Events />\n        </div>\n    </>\n);\n\nexport default Planner;\n","import React from \"react\";\nimport { ThemeProvider } from \"js/contexts/ThemeContext\";\nimport { CalendarProvider } from \"js/contexts/CalendarContext\";\nimport { EventsProvider } from \"js/contexts/EventsContext\";\nimport Planner from \"Planner\";\nimport s from \"./styles.module.css\";\n\nconst App = () => (\n    <div className={s.app}>\n        <ThemeProvider>\n            <CalendarProvider>\n                <EventsProvider>\n                    <Planner />\n                </EventsProvider>\n            </CalendarProvider>\n        </ThemeProvider>\n    </div>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"App\";\nimport \"stylesheets/variables.css\";\nimport \"stylesheets/index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"calendarHeader\":\"styles_calendarHeader__viniG\",\"calendar\":\"styles_calendar__kRKNB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"eventsHeader\":\"styles_eventsHeader__2AtoC\",\"events\":\"styles_events__3vmWR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__3GCOD\",\"title\":\"styles_title__4N9AX\",\"description\":\"styles_description__1KLw6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionHeader\":\"styles_sectionHeader__3PX3i\",\"sectionTitle\":\"styles_sectionTitle__3Ftgf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"styles_alert__nJtVN\",\"info\":\"styles_info__3pQyZ\",\"error\":\"styles_error__2BmDB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"styles_cell__2ZVqC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"month\":\"styles_month__36Qq2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"eventsList\":\"styles_eventsList__2LZ8P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"planner\":\"styles_planner__1h_0n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__3YwY5\"};"],"sourceRoot":""}